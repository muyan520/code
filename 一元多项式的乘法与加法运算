struct LinkNode
{
	int nCoef;
	int nExpon;
    LinkNode* pNext;
	LinkNode(int nCoef, int nExpon) : nCoef(nCoef), nExpon(nExpon), pNext(nullptr) {}
};

LinkNode* creatList()
{
	int nLength = -1;
	printf("Please input the length of the list:");
	scanf_s("%d", &nLength);
	if (nLength <= 0)
		return nullptr;

	int nCoef = -1;
	int nExpon = -1;
	printf("Please enter the coefficients and exponents of a unary polynomial in sequence:");
	scanf_s("%d%d", &nCoef, &nExpon);
	LinkNode* pHead = new LinkNode(nCoef, nExpon);
	LinkNode* pCurrent = pHead;
	for (int i = 0; i < nLength - 1; i++)
	{
		scanf_s("%d%d", &nCoef, &nExpon);
		LinkNode* pLast = new LinkNode(nCoef, nExpon);
		pCurrent->pNext = pLast;
		pCurrent = pLast;
	}

	return pHead;
}

LinkNode* Summation(LinkNode* pList1, LinkNode* pList2)
{
	if (!pList1 || !pList2)
		return nullptr;

	if (!pList1)
		return	pList2;
	if (!pList2)
		return pList1;

	LinkNode* pHead = new LinkNode(-1, -1);
	LinkNode* pCurrent = pHead;
	while (pList1 && pList2)
	{
		if (pList1->nExpon == pList2->nExpon)
		{
			int nExpon = pList1->nExpon;
			int nCoef = pList1->nCoef + pList2->nCoef;
			if (nCoef != 0)
			{
				LinkNode* pNode = new LinkNode(nCoef,nExpon);
				pCurrent->pNext = pNode;
				pCurrent = pCurrent->pNext;
			}
			pList1 = pList1->pNext;
			pList2 = pList2->pNext;
		}
		else if (pList1->nExpon > pList2->nExpon)
		{
			pCurrent->pNext = pList1;
			pCurrent = pCurrent->pNext;
			pList1 = pList1->pNext;
		}
		else if (pList1->nExpon < pList2->nExpon)
		{
			pCurrent->pNext = pList2;
			pCurrent = pCurrent->pNext;
			pList2 = pList2->pNext;
		}
	}
	while (pList1)
	{
		pCurrent->pNext = pList1;
		pCurrent = pCurrent->pNext;
		pList1 = pList1->pNext;
	}
	while (pList2)
	{
		pCurrent->pNext = pList2;
		pCurrent = pCurrent->pNext;
		pList2 = pList2->pNext;
	}

	pCurrent = pHead->pNext;

	delete pHead;
	pHead = nullptr;
	
	return pCurrent;
}

LinkNode* Product(LinkNode* pList1, LinkNode* pList2)
{
	if (!pList1 || !pList2)
		return nullptr;

	if (!pList1)
		return	pList2;
	if (!pList2)
		return pList1;

	LinkNode* pTemp1 = pList1;
	LinkNode* pTemp2 = pList2;
	int nCoef = -1, nExpon = -1;
	LinkNode* pHead = new LinkNode(nCoef, nExpon);
	LinkNode* pCurrent = pHead;
	while (pTemp2)
	{
		nCoef = pTemp1->nCoef * pTemp2->nCoef;
		nExpon = pTemp1->nExpon + pTemp2->nExpon;
		LinkNode* pNode = new LinkNode(nCoef, nExpon);
		pCurrent->pNext = pNode;
		pCurrent = pNode;
		pTemp2 = pTemp2->pNext;
	}
	pTemp1 = pTemp1->pNext;
	while (pTemp1)
	{
		pTemp2 = pList2;
		pCurrent = pHead;
		while (pTemp2)
		{
			nCoef = pTemp1->nCoef * pTemp2->nCoef;
			nExpon = pTemp1->nExpon + pTemp2->nExpon;
			
			while (pCurrent->pNext && pCurrent->pNext->nExpon > nExpon)
			{
				pCurrent = pCurrent->pNext;
			}
			if (pCurrent->pNext && pCurrent->pNext->nExpon == nExpon)
			{
				nCoef = nCoef + pCurrent->pNext->nCoef;
				if (nCoef == 0)
				{
					LinkNode* pNode = pCurrent->pNext;
					pCurrent->pNext = pNode->pNext;
					delete pNode;
					pNode = nullptr;
				}
				else
				{
					pCurrent->pNext->nCoef = nCoef;
				}
			}
			else
			{
				LinkNode* pNewNode = new LinkNode(nCoef, nExpon);
				pNewNode->pNext = pCurrent->pNext;
				pCurrent->pNext = pNewNode;
				pCurrent = pNewNode;
			}
			pTemp2 = pTemp2->pNext;
		}
		pTemp1 = pTemp1->pNext;
	}

	pCurrent = pHead->pNext;

	delete pHead;
	pHead = nullptr;

	return pCurrent;
}

int main(void)
{
	LinkNode* pList1 = creatList();
	LinkNode* pList2 = creatList();

	LinkNode* pList = Summation(pList1, pList2);
	while (pList)
	{
		printf("%d %d\n", pList->nCoef, pList->nExpon);
		pList = pList->pNext;
	}
	pList = Product(pList1, pList2);
	while (pList)
	{
		printf("%d %d\n", pList->nCoef, pList->nExpon);
		pList = pList->pNext;
	}
	return 0;
}
